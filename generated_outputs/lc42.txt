from collections import deque

class Solution:
    def slidingPuzzle(self, board: list[list[int]]) -> int:
        # Flatten the board into a single list
        state = (*board[0], *board[1])
        
        # Initialize the queue with the initial state
        queue, seen, cnt = deque([state]), set([state]), 0
        
        # Define the possible moves
        moves = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)]
        
        while queue:
            for _ in range(len(queue)):
                state = list(queue.popleft())
                idx = state.index(0)
                
                # If the state is solved, return the number of moves
                if state == [1, 2, 3, 4, 5, 0]:
                    return cnt
                
                # Try all possible moves
                for i in moves:
                    curr = state[:]
                    curr[idx], curr[i[0] + idx] = curr[i[0] + idx], 0
                    curr = tuple(curr)
                    
                    # If the new state has been seen before, skip it
                    if curr in seen:
                        continue
                    
                    # Add the new state to the queue and mark it as seen
                    queue.append(curr)
                    seen.add(curr)
            
            # If the queue is empty and the state is not solved, return -1
            cnt += 1
        
        # If the state is not solvable, return -1
        return -1
