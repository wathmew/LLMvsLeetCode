from typing import List

class Solution:
    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:
        ans = [-1]*len(queries)
        
        intervals.sort()
        qidxs = list(range(len(queries)))
        qidxs.sort(key=lambda i: queries[i])
        
        k = 0  # next interval index to push
        ivalids = []  # (size, start, end) for all intervals containing next query, min heap by size
        for i in qidxs:
            q = queries[i]
            
            while ivalids and ivalids[0][2] < q:  # pop the smallest interval that is not covered by the current query
                heappop(ivalids)
            
            while k < len(intervals) and intervals[k][0] <= q:  # pop intervals that start after the current query
                if intervals[k][1] >= q:
                    heappush(ivalids, (intervals[k][1]-intervals[k][0]+1, intervals[k][0], intervals[k][1]))
                k += 1
            
            if ivalids:  # if there are intervals that are covered by the current query
                ans[i] = ivalids[0][0]
        
        return ans
