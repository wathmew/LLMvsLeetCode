class Solution:
    def minInterval(self, intervals: list[list[int]], queries: list[int]) -> list[int]:
        ans = [-1] * len(queries)
        
        intervals.sort()
        qidxs = list(range(len(queries)))
        qidxs.sort(key=lambda i: queries[i])
        
        k = 0  # next interval index to push
        ivals = []  # (size, start, end) for all intervals containing next query, min heap by size
        
        for i in qidxs:
            q = queries[i]
            
            while ivals and ivals[0][2] < q:
                heappop(ivals)
            
            while k < len(intervals) and intervals[k][0] <= q:
                if intervals[k][1] >= q:
                    # skip intervals that start later, but have already ended
                    # (we'd pop them to maintain RI anyway)
                    heappush(ivals, (intervals[k][1]-intervals[k][0]+1, intervals[k][0], intervals[k][1]))
                k += 1
            
            if ivals:
                ans[i] = ivals[0][0]
        
        return ans
