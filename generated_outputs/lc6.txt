# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def mergeKLists(self, lists):
        # Initialize an empty list to store the values from all linked lists
        merged_list = []
        
        # Iterate over each linked list
        for i in range(len(lists)):
            # Initialize a temporary pointer to the head of the current linked list
            temp = lists[i]
            
            # Traverse the linked list and append its values to the merged list
            while temp:
                merged_list.append(temp.val)
                temp = temp.next
        
        # Sort the merged list
        merged_list.sort()
        
        # Create a new linked list from the sorted merged list
        head = ListNode(None)
        current = head
        
        # Iterate over the sorted merged list and create a new linked list
        for val in merged_list:
            new_node = ListNode(val)
            if not head:
                head = new_node
            else:
                current.next = new_node
                current = current.next
        
        # Return the head of the new linked list (excluding the dummy node)
        return head.next
