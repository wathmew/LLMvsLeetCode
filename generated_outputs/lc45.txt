class Solution:
    def mincostToHireWorkers(self, quality: list[int], wage: list[int], k: int) -> float:
        # Initialize total_wage, total_quality, and max_heap
        total_wage, total_quality, max_heap = float('inf'), 0, []

        # Sort the workers based on their wage and quality
        for ratio, q in sorted([(w/q, q) for w, q in zip(wage, quality)]):
            # Add the quality to the total quality
            total_quality += q
            
            # Push the negative of the quality into the max heap
            heappush(max_heap, -q)
            
            # If the size of the max heap is equal to k
            if len(max_heap) == k:
                # Update the total wage
                total_wage = min(total_wage, total_quality * ratio)
                
                # Add the popped quality back to the total quality
                total_quality += heappop(max_heap)
        
        # Return the total wage
        return total_wage
