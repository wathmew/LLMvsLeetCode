def maxProfit(self, k: int, prices: List[int]) -> int:
    """
    This function calculates the maximum profit that can be achieved by buying and selling a stock at most k times.

    Args:
    k (int): The maximum number of transactions allowed.
    prices (List[int]): A list of stock prices.

    Returns:
    int: The maximum profit that can be achieved.
    """
    if k == 0:  # If k is 0, no transactions are allowed, so return 0.
        return 0

    # Initialize a 2D array to store the maximum profit for each subproblem.
    # The number of rows is k + 1, and the number of columns is k + 1.
    dp = [[0] * (k + 1) for _ in range(k + 1)]

    # Iterate over each transaction.
    for i in range(1, k + 1):
        # Initialize the maximum profit for the current transaction to negative infinity.
        max_profit = float('-inf')
        # Iterate over each previous transaction.
        for j in range(1, i + 1):
            # Update the maximum profit for the current transaction.
            # The maximum profit is the maximum of the current maximum profit and the profit if we don't buy the stock.
            dp[i][j] = max(dp[i][j - 1], prices[j - 1] - dp[i - 1][j - 1])

    # Return the maximum profit for the last transaction.
    return dp[k][k]
