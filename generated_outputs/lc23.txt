def maxProfit(self, k: int, prices: List[int]) -> int:
    """
    This function calculates the maximum profit that can be achieved by buying and selling a stock at most k times.

    Args:
    k (int): The maximum number of transactions allowed.
    prices (List[int]): A list of stock prices.

    Returns:
    int: The maximum profit that can be achieved.
    """
    
    # If k is 0, return 0 because no transactions are allowed
    if k == 0:
        return 0
    
    # Initialize a 2D array to store the maximum profit for each subproblem
    dp = [[0, 0] for _ in range(k + 1)]
    
    # Iterate over each transaction
    for i in range(1, k + 1):
        # Initialize the minimum price and maximum profit for the current transaction
        min_price = prices[0]
        max_profit = 0
        
        # Iterate over each day
        for price in prices:
            # Update the minimum price and maximum profit for the current transaction
            min_price = min(min_price, price)
            max_profit = max(max_profit, price - min_price)
        
        # Update the maximum profit for the current transaction
        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + max_profit)
        dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])
    
    # Return the maximum profit for the last transaction
    return dp[k][1]
