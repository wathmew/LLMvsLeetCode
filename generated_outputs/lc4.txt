def minWindow(s, t):
    """
    Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string.

    Args:
        s (str): The string to search for the minimum window.
        t (str): The string containing the characters to search for in s.

    Returns:
        str: The minimum window substring of s that includes all characters in t, or an empty string if no such substring exists.
    """
    if len(s) < len(t):
        return ""

    char_count = {}
    for ch in t:
        char_count[ch] += 1

    target_chars_remaining = len(t)
    min_window = (0, float("inf"))

    start_index = 0

    for end_index, ch in enumerate(s):
        if char_count[ch] > 0:
            target_chars_remaining -= 1

        if target_chars_remaining == 0:
            while True:
                char_at_start = s[start_index]
                if char_count[char_at_start] == 0:
                    break
                char_count[char_at_start] += 1
                start_index += 1

            if end_index - start_index < min_window[1] - min_window[0]:
                min_window = (start_index, end_index)

            char_count[s[start_index]] += 1
            target_chars_remaining += 1
            start_index += 1

    return "" if min_window[1] > len(s) else s[min_window[0]:min_window[1]+1]
